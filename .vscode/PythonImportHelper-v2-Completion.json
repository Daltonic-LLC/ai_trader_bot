[
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "welcome_router",
        "importPath": "app.welcome.starter",
        "description": "app.welcome.starter",
        "isExtraImport": true,
        "detail": "app.welcome.starter",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Observer",
        "importPath": "watchdog.observers",
        "description": "watchdog.observers",
        "isExtraImport": true,
        "detail": "watchdog.observers",
        "documentation": {}
    },
    {
        "label": "Observer",
        "importPath": "watchdog.observers",
        "description": "watchdog.observers",
        "isExtraImport": true,
        "detail": "watchdog.observers",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "welcome_router",
        "kind": 5,
        "importPath": "backend.app.welcome.starter",
        "description": "backend.app.welcome.starter",
        "peekOfCode": "welcome_router = APIRouter()\n@welcome_router.post(\"/\")\nasync def welcome_message():\n    return {\n        \"status\": \"Success\",\n        \"message\": \"Welcome to the Starter API! This is a simple FastAPI application to get you started.\",\n    }",
        "detail": "backend.app.welcome.starter",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.app.main",
        "description": "backend.app.main",
        "peekOfCode": "app = FastAPI()\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Update this to your frontend URL\n    allow_credentials=True,\n    allow_methods=[\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\",",
        "detail": "backend.app.main",
        "documentation": {}
    },
    {
        "label": "FastAPIServer",
        "kind": 6,
        "importPath": "backend.run",
        "description": "backend.run",
        "peekOfCode": "class FastAPIServer:\n    def __init__(self):\n        self.config = uvicorn.Config(\n            \"app.main:app\",\n            host=\"0.0.0.0\",\n            port=8000,\n            reload=False,\n            loop=\"asyncio\",\n        )\n        self.server = uvicorn.Server(self.config)",
        "detail": "backend.run",
        "documentation": {}
    },
    {
        "label": "run_fastapi",
        "kind": 2,
        "importPath": "backend.run",
        "description": "backend.run",
        "peekOfCode": "def run_fastapi():\n    \"\"\"Run FastAPI server in a separate process.\"\"\"\n    server = FastAPIServer()\n    asyncio.run(server.start())\ndef main():\n    \"\"\"Run FastAPI and CoinScheduler processes with log file watching.\"\"\"\n    if len(sys.argv) > 1:\n        folder_to_watch = os.path.abspath(sys.argv[1])\n    else:\n        folder_to_watch = os.path.abspath(\"./data\")",
        "detail": "backend.run",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.run",
        "description": "backend.run",
        "peekOfCode": "def main():\n    \"\"\"Run FastAPI and CoinScheduler processes with log file watching.\"\"\"\n    if len(sys.argv) > 1:\n        folder_to_watch = os.path.abspath(sys.argv[1])\n    else:\n        folder_to_watch = os.path.abspath(\"./data\")\n    logger.info(\"Starting FastAPI and CoinScheduler services...\")\n    logger.info(f\"Watching folder: {folder_to_watch} ðŸ‘€\")\n    logger.info(\"Monitoring for changes in log files...\")\n    # Create processes for FastAPI and CoinScheduler",
        "detail": "backend.run",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.run",
        "description": "backend.run",
        "peekOfCode": "logger = logging.getLogger(\"server\")\nclass FastAPIServer:\n    def __init__(self):\n        self.config = uvicorn.Config(\n            \"app.main:app\",\n            host=\"0.0.0.0\",\n            port=8000,\n            reload=False,\n            loop=\"asyncio\",\n        )",
        "detail": "backend.run",
        "documentation": {}
    },
    {
        "label": "FastAPIServer",
        "kind": 6,
        "importPath": "backend.run_dev",
        "description": "backend.run_dev",
        "peekOfCode": "class FastAPIServer:\n    def __init__(self):\n        self.config = uvicorn.Config(\n            \"app.main:app\",\n            host=\"0.0.0.0\",\n            port=8000,\n            reload=False,  # We handle reload manually\n            loop=\"asyncio\",\n        )\n        self.server = uvicorn.Server(self.config)",
        "detail": "backend.run_dev",
        "documentation": {}
    },
    {
        "label": "run_fastapi",
        "kind": 2,
        "importPath": "backend.run_dev",
        "description": "backend.run_dev",
        "peekOfCode": "def run_fastapi():\n    \"\"\"Run FastAPI server in a separate process\"\"\"\n    server = FastAPIServer()\n    asyncio.run(server.start())\ndef main():\n    \"\"\"Run FastAPI with file and folder change watching for .log files\"\"\"\n    if len(sys.argv) > 1:\n        folder_to_watch = os.path.abspath(sys.argv[1])\n    else:\n        folder_to_watch = os.path.abspath(\"./data\")",
        "detail": "backend.run_dev",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.run_dev",
        "description": "backend.run_dev",
        "peekOfCode": "def main():\n    \"\"\"Run FastAPI with file and folder change watching for .log files\"\"\"\n    if len(sys.argv) > 1:\n        folder_to_watch = os.path.abspath(sys.argv[1])\n    else:\n        folder_to_watch = os.path.abspath(\"./data\")\n    logger.info(f\"Watching folder: {folder_to_watch} ðŸ‘€\")\n    logger.info(\"Monitoring for changes in log files...\")\n    fastapi_process = multiprocessing.Process(target=run_fastapi)\n    fastapi_process.start()",
        "detail": "backend.run_dev",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.run_dev",
        "description": "backend.run_dev",
        "peekOfCode": "logger = logging.getLogger(\"server\")\nclass FastAPIServer:\n    def __init__(self):\n        self.config = uvicorn.Config(\n            \"app.main:app\",\n            host=\"0.0.0.0\",\n            port=8000,\n            reload=False,  # We handle reload manually\n            loop=\"asyncio\",\n        )",
        "detail": "backend.run_dev",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    }
]